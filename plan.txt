# -*- org -*-

#+TITLE: Plan du mémoire de maîtrise

* TODO Écritures de langages spécifiques au domaine
   Démontrer que l'utilisation des macros de Scheme permet de
   facilement modifier le langage de manière à permettre une écriture
   de jeu plus concise.

   Pour y arriver:
** Extensions de bases [%]
   Écrire des extensions de Scheme permettant la simplification
   du code d'un jeu.

** Scripting de niveaux [%]
   Ajoute des nouvelles formes spéciales permettant de faire
   facilement du "scripting" de niveaux.

* TODO Dynamisme
   Démontrer que le dynamisme du langage Scheme apporte une très
   grande flexibilité lors de la programmation de jeux.

   Pour y arriver:
** REPL
   Utilisation de "REPL" pour le développement interactif

** eval/load
   Utilisation potentielle des fonctions "eval" et "load" afin de
   d'évaluer ou charger dynamiquement des expressions/librairies.

* TODO Structures et stockage de données
   Démontrer que l'utilisation des S-expressions de scheme comme
   structure de données externes permet d'obtenir facilement des
   représentations externes facilement manipulables et utilisables.
   
   Pour y arriver:
** Representations de nivaux
   Utiliser des S-expressions comme representation de niveaux ou
   objets de tableaux d'un jeu.
   
* TODO Puissance d'abstraction
   Démontrer que les fonctions d'ordres supérieures permettent
   l'encapsulations et la modularité de comportements d'objets dans
   un jeu et que coût associé est faible.

   Pour y arriver:
** Modularisation par fonctions de 1er ordre
   Écrire des parties de code qui peuvent être modularisées en
   fonction de fermetures passées en paramètre.
** 60 FPS
   Observer un taux de rafraîchissement acceptable (autour de 60 fps)
   pour tous les jeux implantés.

* TODO Gestion de mémoire automatique
   Démontrer que l'utilisation d'une gestion de mémoire automatique
   n'influencera que peu ou pas sur les performances du jeux.

   Pour y arriver:
** Temps de GC non significatifs
   Observer que la distrubution des temps de gc semble normale et de
   moyenne basse.

** Utiliation de mémoire raisonnable
   Observer une utilisation de la mémoire acceptable.

* TODO Cycles de développement
   Démontrer que les cycles de développement de jeu écrits en Scheme
   sont courts (voir plus court qu'un jeu écrit dans un langage
   traditionnel).

   Pour y arriver:
** Développement rapide
   Écrire plusieurs jeux et observer des temps de développement.
   courts.
** Debugger
   Utilisation de debugger à distance
         
