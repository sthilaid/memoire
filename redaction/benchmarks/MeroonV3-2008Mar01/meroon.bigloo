;;; $Id: meroon.bigloo,v 3.15 1999/11/27 17:45:14 queinnec Exp $
;;; Copyright (c) 1990-96 by Christian Queinnec. All rights reserved.

;;;                            *******************************
;;;                            Meroon V3 Adaptation for Bigloo
;;;                            *******************************

;;; This file contains the necessary adaptation for Bigloo.

;;; This program is distributed in the hope that it will be useful.
;;; Use and copying of this software and preparation of derivative works
;;; based upon this software are permitted, so long as the following
;;; conditions are met:
;;;      o credit to the authors is acknowledged following current
;;;        academic behaviour
;;;      o no fees or compensation are charged for use, copies, or
;;;        access to this software
;;;      o this copyright notice is included intact.
;;; This software is made available AS IS, and no warranty is made about 
;;; the software or its performance. 

;;; Bug descriptions, use reports, comments or suggestions are welcome.
;;; Send them to    
;;;   <queinnec@polytechnique.fr>   or to:   <Christian.Queinnec@inria.fr>
;;;                                 or to:
;;;   Christian Queinnec                     Christian Queinnec
;;;   Laboratoire d'Informatique de l'X      INRIA -- Rocquencourt
;;;   Ecole Polytechnique                    Domaine de Voluceau, BP 105
;;;   91128 Palaiseau                        78153 Le Chesnay Cedex
;;;   France                                 France

;;;************************************************
;;;    Small, Efficient and Innovative Class System
;;;       Christian Queinnec  
;;;   \'Ecole Polytechnique & INRIA-Rocquencourt
;;;************************************************

;;; This macro defines the define-meroon-macro syntax. This definition
;;; must be the first one in the file (see expand-meroon.scm
;;; file). The second definition must be define-internal-meroon-macro.

(define-macro (define-meroon-macro call . body)
  ;;(eval `(define-macro ,call
  ;;         ((eval `(lambda ,(flat (cdr call)) . ,body))
  ;;           . ,(flat (cdr call)) ) ))
  (let ()
    (define (flat l)
      (if (pair? l)
          (cons (car l) (flat (cdr l)))
          (if (null? l) l (list l)) ) )
    (define (wrap call body)
      (cons 'define-macro
            (cons call
                  (list (cons (list 'eval
                                    (list (quote quote)
                                          (cons 'lambda
                                                (cons (flat (cdr call))
                                                      body ) ) ) )
                              (flat (cdr call)) )) ) ) )
    `(begin (eval ',(wrap call body))
            (define-macro ,call . ,body) ) ) )

;;; Test: (expand '(define-meroon-macro (f a) (g b)))

(define-macro (define-internal-meroon-macro call . body)
  `(define-macro ,call . ,body) )

;;; Make Meroon macros pervasive themselves.

(define-meroon-macro (make-meroon-macro-pervasive)
  (list 
   'eval 
   ''(begin 
       (define-macro (define-meroon-macro call . body)
         ;;(eval `(define-macro ,call
         ;;         ((eval `(lambda ,(flat (cdr call)) . ,body))
         ;;           . ,(flat (cdr call)) ) ))
         (let ()
           (define (flat l)
             (if (pair? l)
                 (cons (car l) (flat (cdr l)))
                 (if (null? l) l (list l)) ) )
           (define (wrap call body)
             (cons 'define-macro
                   (cons call
                         (list (cons (list 'eval
                                           (list (quote quote)
                                                 (cons 'lambda
                                                       (cons (flat (cdr call))
                                                             body ) ) ) )
                                     (flat (cdr call)) )) ) ) )
           `(begin (eval ',(wrap call body))
                   (define-macro ,call . ,body) ) ) )
       (define-macro (define-internal-meroon-macro call . body)
         `(define-macro ,call . ,body) )
       #t ) ) )

;;; Conditional compilation: The variable *meroon-features* defines
;;; the features of Meroon to be taken into account when loading (or
;;; compiling Meroon). 

(define *meroon-features* 
  '( bigloo 2.1 DSSSL
     pervasive-meroon-macros
     ) )

;;; Local Variables:
;;; mode: scheme
;;; End:

;;; End of adaptation of Meroon for Bigloo.
