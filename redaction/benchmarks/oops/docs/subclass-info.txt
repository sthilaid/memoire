=======================================================================
(define (%subclass? sub super)
  (or (eq? super <value>)
      (= (class-id super)
         (scvector-ref  %%subclass-vector%%
                        (+ (class-offset super)
                           (class-id sub))))))
======================================================================= 
(define (display-classes)
  (define the-mark  (gensym 'mark))
  (define (mark class)    (class-mark-set! class the-mark))
  (define (marked? class) (eq? the-mark (class-mark class)))
  (define (spaces n)
    (let loop ( (n n) )
      (cond
       ((> n 0)
        (display "    ")
        (loop ( - n 1))))))
  (define (class-inorder-for-each class level)
    (newline)
    (spaces level)
    (format #t "~a ~t ~2F [~2F..~2F] offset=~3F"
            (class-name class)
            (class-id class)
            (class-min-id class) (class-max-id class)
            (class-offset class))
    (when (not (marked? class))
      (mark class)
      (for-each (lambda (child) (class-inorder-for-each child (+ level 1)))
                (class-direct-subclasses class))
      ))
  (class-inorder-for-each <value> 0)
  (newline)
)

> (display-classes)

<value> .	.	.	.	  0 [ 0..88] offset=  0
    <handler> .	.	.	.	  1 [ 1...1] offset= -1
    <code+msg> .	.	.	.	  2 [ 2..11] offset= -1
        <foreign-to-scheme-conversion-exn> .	  3 [ 3...3] offset=  8
        <scheme-to-foreign-conversion-exn> .	  6 [ 6...6] offset= 11
        <os-call-exn> .	.	.	.	 11 [11..11] offset= 44
    <proc+args> .	.	.	.	  7 [ 3..33] offset= 15
        <foreign-to-scheme-conversion-exn> .	  3 [ 3...3] offset=  8
        <scheme-to-foreign-conversion-exn> .	  6 [ 6...6] offset= 11
        <os-exn> .	.	.	.	  8 [ 8..11] offset= 41
            <unbound-os-environment-exn> .	  9 [ 9...9] offset= 44
            <no-such-file-or-directory-exn> .	 10 [10..10] offset= 44
            <os-call-exn> .	.	 11 [11..11] offset= 44
        <call-error> .	.	.	 30 [30..31] offset= 92
            <divide-by-zero> .	.	 31 [31..31] offset= 93
        <range-error> .	.	.	 33 [33..33] offset= 93
    <format-info> .	.	.	 38 [ 3..42] offset=162
        <restart> .	.	.	 39 [39..42] offset=166
            <add-key-elt> .	.	 40 [40..40] offset=169
            <return-value-in-place-of> . 41 [41..41] offset=169
            <retry-apply> .	.	 42 [42..42] offset=169
        <warning> .	.	.	 37 [37..37] offset=127
        <exception> .	.	.	 12 [ 3..35] offset= 53
            <breakpoint> .	.	 13 [13..13] offset= 76
            <memory-exn> .	.	 14 [14..14] offset= 76
            <reader-exn> .	.	 15 [15..17] offset= 76
                <expression-parsing-exn> .	  16 [16..16] offset= 78
                <datum-parsing-exn> .	.	  17 [17..17] offset= 78
            <foreign-interface-exn> .	.	   4 [ 3...6] offset=  9
                <foreign-repeated-return-exn> .	   5 [ 5...5] offset= 11
                <foreign-to-scheme-conversion-exn> 3 [ 3...3] offset=  8
                <scheme-to-foreign-conversion-exn> 6 [ 6...6] offset= 11
            <thread-exn> .	.	 18 [18..25] offset= 78
                <uncaught-exception> .	 19 [19..19] offset= 85
                <terminated-thread-exn>  20 [20..20] offset= 85
                <started-thread-exn> .	 21 [21..21] offset= 85
                <join-timeout-exn> .	 22 [22..22] offset= 85
                <abandoned-mutex-exn> .	 23 [23..23] offset= 85
                <deadlock-exn> .	 24 [24..24] offset= 85
                <scheduler-exn> .	 25 [25..25] offset= 85
            <os-exn> .	.	.	  8 [ 8..11] offset= 41
            <error> .	.	.	 26 [26..33] offset= 85
                <elt-not-found> .	 27 [27..27] offset= 92
                <abstract-class> .	 28 [28..28] offset= 92
                <unbound-global-error> 	 29 [29..29] offset= 92
                <call-error> .	.	 30 [30..31] offset= 92
                <type-error> .	.	 32 [32..32] offset= 93
                <range-error> .	.	 33 [33..33] offset= 93
            <unknown-error> .	.	 34 [34..34] offset= 93
            <abort> .	.	.	 35 [35..35] offset= 93
    <condition> .	.	.	 36 [ 3..37] offset=126
        <warning> .	.	.	 37 [37..37] offset=127
        <exception> .	.	.	 12 [ 3..35] offset= 53
    <collection> .	.	.	 43 [43..63] offset=169
        <set> .	.	.	.	 44 [44..44] offset=189
        <thread-safe> .	.	.	 45 [45..46] offset=189
            <ts-table> .	.	 46 [46..46] offset=190
        <keyed> .	.	.	 62 [46..63] offset=284
            <dictionary> .	.	 47 [46..63] offset=191
                <ts-table> .	.	 46 [46..46] offset=190
                <alist> .	.	 48 [48..48] offset=207
                <hash-table> .	.	 63 [63..63] offset=285
            <indexed> .	.	.	 53 [53..61] offset=223
                <vector> .	.	 54 [54..56] offset=231
                    <u8vector> ..	 55 [55..55] offset=233
                    <stretchy-vector> .	 56 [56..56] offset=233
                <string> .	.	 59 [58..59] offset=251
                    <stretchy-string> .	 58 [58..58] offset=250
                <sorted> .	 61 [61..61] offset=268
        <stretchy> .	.	 57 [46..63] offset=244
            <stretchy-string> .	 58 [58..58] offset=250
            <stretchy-vector> .	 56 [56..56] offset=233
            <elastic> .	.	 60 [46..63] offset=265
                <dictionary> .	 47 [46..63] offset=191
        <ordered> .	.	 49 [48..61] offset=208
            <alist> .	.	 48 [48..48] offset=207
            <list> .	.	 50 [50..50] offset=220
            <pair> .	.	 51 [50..51] offset=221
                <list>.	 .	 50 [50..50] offset=220
            <indexed> .	.	 53 [53..61] offset=223
        <null> .	.	 52 [50..52] offset=223
            <list> .	.	 50 [50..50] offset=220
    <keyword> .	.	.	 64 [64..64] offset=285
    <meroon> .	.	.	 65 [65..65] offset=285
    <box> .	.	.	 66 [66..66] offset=285
    <structure> .	.	 67 [67..68] offset=285
        <hash-table> .	.	 68 [68..68] offset=286
    <output-port> .	.	 69 [69..69] offset=286
    <input-port> .	.	 70 [70..70] offset=286
    <null> .	.	.	 71 [71..71] offset=286
    <boolean> .	.	.	 72 [72..72] offset=286
    <character> .	.	 73 [73..73] offset=286
    <symbol> .	.	.	 74 [74..74] offset=286
    <pair> .	.	.	 75 [75..75] offset=286
    <number> .	.	.	 76 [76..80] offset=286
        <complex> .	.	 77 [77..80] offset=290
            <real> .	.	 78 [78..80] offset=293
                <rational> .	 79 [79..80] offset=295
                    <integer> .	 80 [80..80] offset=296
    <type> .	.	.	 81 [81..87] offset=296
        <range> .	.	 82 [82..83] offset=302
            <limited-range> .	 83 [83..83] offset=303
        <limited-type> .	 84 [83..84] offset=304
            <limited-range> .	 83 [83..83] offset=303
        <type-union> .	.	 85 [85..85] offset=304
        <singleton> .	.	 86 [86..86] offset=304
        <class> .	.	 87 [87..87] offset=304
    <function> .	.	 88 [87..88] offset=305
        <class> .	.	 87 [87..87] offset=304
>
=======================================================================
(let loop ( (index 0) (limit (scvector-length %%subclass-vector%%)) )
  (cond
   ((< index limit)
    (format #t "[~3F] => ~2F  " index (scvector-ref %%subclass-vector%% index))
    (if (zero? (modulo index 5)) (newline))
    (loop (+ index 1) limit))
   (else (newline))))

[  0] =>  1  
[  1] =>  2  [  2] =>  2  [  3] =>  0  [  4] =>  0  [  5] =>  2  
[  6] =>  0  [  7] =>  0  [  8] =>  0  [  9] =>  0  [ 10] =>  2  
[ 11] =>  3  [ 12] =>  4  [ 13] =>  4  [ 14] =>  4  [ 15] =>  4  
[ 16] =>  5  [ 17] =>  6  [ 18] =>  7  [ 19] =>  0  [ 20] =>  0  
[ 21] =>  7  [ 22] =>  7  [ 23] =>  7  [ 24] =>  7  [ 25] =>  7  
[ 26] =>  7  [ 27] =>  0  [ 28] =>  0  [ 29] =>  0  [ 30] =>  0  
[ 31] =>  0  [ 32] =>  0  [ 33] =>  0  [ 34] =>  0  [ 35] =>  0  
[ 36] =>  0  [ 37] =>  0  [ 38] =>  0  [ 39] =>  0  [ 40] =>  0  
[ 41] =>  0  [ 42] =>  0  [ 43] =>  0  [ 44] =>  0  [ 45] =>  7  
[ 46] =>  7  [ 47] =>  0  [ 48] =>  7  [ 49] =>  8  [ 50] =>  8  
[ 51] =>  8  [ 52] =>  8  [ 53] =>  9  [ 54] => 10  [ 55] => 11  
[ 56] => 12  [ 57] => 12  [ 58] => 12  [ 59] => 12  [ 60] =>  0  
[ 61] => 12  [ 62] => 12  [ 63] => 12  [ 64] => 12  [ 65] => 12  
[ 66] => 12  [ 67] => 12  [ 68] => 12  [ 69] => 12  [ 70] => 12  
[ 71] => 12  [ 72] => 12  [ 73] => 12  [ 74] => 12  [ 75] => 12  
[ 76] => 12  [ 77] => 12  [ 78] => 12  [ 79] => 12  [ 80] => 12  
[ 81] => 12  [ 82] => 12  [ 83] => 12  [ 84] => 12  [ 85] => 12  
[ 86] => 12  [ 87] => 12  [ 88] => 12  [ 89] => 13  [ 90] => 14  
[ 91] => 15  [ 92] => 15  [ 93] => 15  [ 94] => 16  [ 95] => 17  
[ 96] => 18  [ 97] => 18  [ 98] => 18  [ 99] => 18  [100] => 18  
[101] => 18  [102] => 18  [103] => 18  [104] => 19  [105] => 20  
[106] => 21  [107] => 22  [108] => 23  [109] => 24  [110] => 25  
[111] => 26  [112] => 26  [113] => 26  [114] => 26  [115] => 26  
[116] => 26  [117] => 26  [118] => 26  [119] => 27  [120] => 28  
[121] => 29  [122] => 30  [123] => 30  [124] => 31  [125] => 32  
[126] => 33  [127] => 34  [128] => 35  [129] => 36  [130] => 36  
[131] => 36  [132] => 36  [133] =>  0  [134] => 36  [135] => 36  
[136] => 36  [137] => 36  [138] => 36  [139] => 36  [140] => 36  
[141] => 36  [142] => 36  [143] => 36  [144] => 36  [145] => 36  
[146] => 36  [147] => 36  [148] => 36  [149] => 36  [150] => 36  
[151] => 36  [152] => 36  [153] => 36  [154] => 36  [155] => 36  
[156] => 36  [157] => 36  [158] => 36  [159] => 36  [160] => 36  
[161] => 36  [162] => 36  [163] => 36  [164] => 37  [165] => 38  
[166] => 38  [167] => 38  [168] => 38  [169] =>  0  [170] => 38  
[171] => 38  [172] => 38  [173] => 38  [174] => 38  [175] => 38  
[176] => 38  [177] => 38  [178] => 38  [179] => 38  [180] => 38  
[181] => 38  [182] => 38  [183] => 38  [184] => 38  [185] => 38  
[186] => 38  [187] => 38  [188] => 38  [189] => 38  [190] => 38  
[191] => 38  [192] => 38  [193] => 38  [194] => 38  [195] => 38  
[196] => 38  [197] => 38  [198] =>  0  [199] => 38  [200] => 38  
[201] => 38  [202] => 38  [203] => 38  [204] => 38  [205] => 39  
[206] => 39  [207] => 39  [208] => 39  [209] => 40  [210] => 41  
[211] => 42  [212] => 43  [213] => 43  [214] => 43  [215] => 43  
[216] => 43  [217] => 43  [218] => 43  [219] => 43  [220] => 43  
[221] => 43  [222] => 43  [223] => 43  [224] => 43  [225] => 43  
[226] => 43  [227] => 43  [228] => 43  [229] => 43  [230] => 43  
[231] => 43  [232] => 43  [233] => 44  [234] => 45  [235] => 45  
[236] => 46  [237] => 47  [238] => 47  [239] => 47  [240] =>  0  
[241] =>  0  [242] =>  0  [243] =>  0  [244] =>  0  [245] =>  0  
[246] =>  0  [247] =>  0  [248] =>  0  [249] =>  0  [250] =>  0  
[251] =>  0  [252] =>  0  [253] =>  0  [254] => 47  [255] => 48  
[256] => 49  [257] => 49  [258] => 49  [259] => 49  [260] =>  0  
[261] => 49  [262] => 49  [263] => 49  [264] => 49  [265] =>  0  
[266] => 49  [267] => 49  [268] =>  0  [269] => 49  [270] => 50  
[271] => 51  [272] => 51  [273] => 52  [274] =>  0  [275] => 52  
[276] => 53  [277] => 53  [278] => 53  [279] => 53  [280] =>  0  
[281] => 53  [282] => 53  [283] =>  0  [284] => 53  [285] => 54  
[286] => 54  [287] => 54  [288] => 55  [289] => 56  [290] => 57  
[291] => 57  [292] => 57  [293] =>  0  [294] =>  0  [295] =>  0  
[296] =>  0  [297] =>  0  [298] =>  0  [299] =>  0  [300] => 57  
[301] => 57  [302] => 57  [303] =>  0  [304] => 57  [305] =>  0  
[306] =>  0  [307] => 57  [308] => 58  [309] => 59  [310] => 59  
[311] => 60  [312] => 60  [313] => 60  [314] =>  0  [315] =>  0  
[316] =>  0  [317] =>  0  [318] =>  0  [319] =>  0  [320] =>  0  
[321] =>  0  [322] =>  0  [323] =>  0  [324] =>  0  [325] => 60  
[326] =>  0  [327] =>  0  [328] => 60  [329] => 61  [330] => 62  
[331] => 62  [332] => 62  [333] =>  0  [334] =>  0  [335] =>  0  
[336] =>  0  [337] => 62  [338] => 62  [339] => 62  [340] => 62  
[341] =>  0  [342] => 62  [343] => 62  [344] =>  0  [345] => 62  
[346] => 62  [347] => 62  [348] => 63  [349] => 64  [350] => 65  
[351] => 66  [352] => 67  [353] => 67  [354] => 68  [355] => 69  
[356] => 70  [357] => 71  [358] => 72  [359] => 73  [360] => 74  
[361] => 75  [362] => 76  [363] => 76  [364] => 76  [365] => 76  
[366] => 76  [367] => 77  [368] => 77  [369] => 77  [370] => 77  
[371] => 78  [372] => 78  [373] => 78  [374] => 79  [375] => 79  
[376] => 80  [377] => 81  [378] => 81  [379] => 81  [380] => 81  
[381] => 81  [382] => 81  [383] => 81  [384] => 82  [385] => 82  
[386] => 83  [387] => 84  [388] => 84  [389] => 85  [390] => 86  
[391] => 87  [392] => 88  [393] => 88  
>
=======================================================================
(class-foreach (lambda (c) 
	         (format #t "~%[~2F..~2F..~2F] offset=~3F ~a" 
	                 (class-min-id c) (class-id c) (class-max-id c) (class-offset c) (class-name c)))
	        <value>)

[ 1.. 1.. 1] offset= -1 <handler>
[ 3.. 3.. 3] offset=  8 <foreign-to-scheme-conversion-exn>
[ 6.. 6.. 6] offset= 11 <scheme-to-foreign-conversion-exn>
[11..11..11] offset= 44 <os-call-exn>
[ 2.. 2..11] offset= -1 <code+msg>
[ 9.. 9.. 9] offset= 44 <unbound-os-environment-exn>
[10..10..10] offset= 44 <no-such-file-or-directory-exn>
[ 8.. 8..11] offset= 41 <os-exn>
[31..31..31] offset= 93 <divide-by-zero>
[30..30..31] offset= 92 <call-error>
[33..33..33] offset= 93 <range-error>
[ 3.. 7..33] offset= 15 <proc+args>
[40..40..40] offset=169 <add-key-elt>
[41..41..41] offset=169 <return-value-in-place-of>
[42..42..42] offset=169 <retry-apply>
[39..39..42] offset=166 <restart>
[37..37..37] offset=127 <warning>
[13..13..13] offset= 76 <breakpoint>
[14..14..14] offset= 76 <memory-exn>
[16..16..16] offset= 78 <expression-parsing-exn>
[17..17..17] offset= 78 <datum-parsing-exn>
[15..15..17] offset= 76 <reader-exn>
[ 5.. 5.. 5] offset= 11 <foreign-repeated-return-exn>
[ 3.. 4.. 6] offset=  9 <foreign-interface-exn>
[19..19..19] offset= 85 <uncaught-exception>
[20..20..20] offset= 85 <terminated-thread-exn>
[21..21..21] offset= 85 <started-thread-exn>
[22..22..22] offset= 85 <join-timeout-exn>
[23..23..23] offset= 85 <abandoned-mutex-exn>
[24..24..24] offset= 85 <deadlock-exn>
[25..25..25] offset= 85 <scheduler-exn>
[18..18..25] offset= 78 <thread-exn>
[27..27..27] offset= 92 <elt-not-found>
[28..28..28] offset= 92 <abstract-class>
[29..29..29] offset= 92 <unbound-global-error>
[32..32..32] offset= 93 <type-error>
[26..26..33] offset= 85 <error>
[34..34..34] offset= 93 <unknown-error>
[35..35..35] offset= 93 <abort>
[ 3..12..35] offset= 53 <exception>
[ 3..38..42] offset=162 <format-info>
[ 3..36..37] offset=126 <condition>
[44..44..44] offset=189 <set>
[46..46..46] offset=190 <ts-table>
[45..45..46] offset=189 <thread-safe>
[48..48..48] offset=207 <alist>
[63..63..63] offset=285 <hash-table>
[46..47..63] offset=191 <dictionary>
[55..55..55] offset=233 <u8vector>
[56..56..56] offset=233 <stretchy-vector>
[54..54..56] offset=231 <vector>
[58..58..58] offset=250 <stretchy-string>
[58..59..59] offset=251 <string>
[61..61..61] offset=268 <sorted>
[53..53..61] offset=223 <indexed>
[46..62..63] offset=284 <keyed>
[46..60..63] offset=265 <elastic>
[46..57..63] offset=244 <stretchy>
[50..50..50] offset=220 <list>
[50..51..51] offset=221 <pair>
[48..49..61] offset=208 <ordered>
[50..52..52] offset=223 <null>
[43..43..63] offset=169 <collection>
[64..64..64] offset=285 <keyword>
[65..65..65] offset=285 <meroon>
[66..66..66] offset=285 <box>
[68..68..68] offset=286 <hash-table>
[67..67..68] offset=285 <structure>
[69..69..69] offset=286 <output-port>
[70..70..70] offset=286 <input-port>
[71..71..71] offset=286 <null>
[72..72..72] offset=286 <boolean>
[73..73..73] offset=286 <character>
[74..74..74] offset=286 <symbol>
[75..75..75] offset=286 <pair>
[80..80..80] offset=296 <integer>
[79..79..80] offset=295 <rational>
[78..78..80] offset=293 <real>
[77..77..80] offset=290 <complex>
[76..76..80] offset=286 <number>
[83..83..83] offset=303 <limited-range>
[82..82..83] offset=302 <range>
[83..84..84] offset=304 <limited-type>
[85..85..85] offset=304 <type-union>
[86..86..86] offset=304 <singleton>
[87..87..87] offset=304 <class>
[81..81..87] offset=296 <type>
[87..88..88] offset=305 <function>
[ 0.. 0..88] offset=  0 <value>

======================================================================= 
(define (display-classes)
  (define the-mark  (gensym 'mark))
  (define (mark class)    (class-mark-set! class the-mark))
  (define (marked? class) (eq? the-mark (class-mark class)))
  (define (spaces n)
    (let loop ( (n n) )
      (cond
       ((> n 0)
        (display "    ")
        (loop ( - n 1))))))
  (define (class-inorder-for-each class level)
    (newline)
    (spaces level)
    (display (class-name class))
    (when (not (marked? class))
      (mark class)
      (for-each (lambda (child) (class-inorder-for-each child (+ level 1)))
                (class-direct-subclasses class))
      ))
  (class-inorder-for-each <value> 0)
  (newline)
)


<value>
    <handler>
    <code+msg>
        <foreign-to-scheme-conversion-exn>
        <scheme-to-foreign-conversion-exn>
        <os-call-exn>
    <proc+args>
        <foreign-to-scheme-conversion-exn>
        <scheme-to-foreign-conversion-exn>
        <os-exn>
            <unbound-os-environment-exn>
            <no-such-file-or-directory-exn>
            <os-call-exn>
        <call-error>
            <divide-by-zero>
        <range-error>
    <format-info>
        <restart>
            <add-key-elt>
            <return-value-in-place-of>
            <retry-apply>
        <warning>
        <exception>
            <breakpoint>
            <memory-exn>
            <reader-exn>
                <expression-parsing-exn>
                <datum-parsing-exn>
            <foreign-interface-exn>
                <foreign-repeated-return-exn>
                <foreign-to-scheme-conversion-exn>
                <scheme-to-foreign-conversion-exn>
            <thread-exn>
                <uncaught-exception>
                <terminated-thread-exn>
                <started-thread-exn>
                <join-timeout-exn>
                <abandoned-mutex-exn>
                <deadlock-exn>
                <scheduler-exn>
            <os-exn>
            <error>
                <elt-not-found>
                <abstract-class>
                <unbound-global-error>
                <call-error>
                <type-error>
                <range-error>
            <unknown-error>
            <abort>
    <condition>
        <warning>
        <exception>
    <collection>
        <set>
        <thread-safe>
            <ts-table>
        <keyed>
            <dictionary>
                <ts-table>
                <alist>
                <hash-table>
            <indexed>
                <vector>
                    <u8vector>
                    <stretchy-vector>
                <string>
                    <stretchy-string>
                <sorted>
        <stretchy>
            <stretchy-string>
            <stretchy-vector>
            <elastic>
                <dictionary>
        <ordered>
            <alist>
            <list>
            <pair>
                <list>
            <indexed>
        <null>
            <list>
    <keyword>
    <meroon>
    <box>
    <structure>
        <hash-table>
    <output-port>
    <input-port>
    <null>
    <boolean>
    <character>
    <symbol>
    <pair>
    <number>
        <complex>
            <real>
                <rational>
                    <integer>
    <type>
        <range>
            <limited-range>
        <limited-type>
            <limited-range>
        <type-union>
        <singleton>
        <class>
    <function>
        <class>
>

