head	1.1;
access;
symbols;
locks
	lucier:1.1; strict;
comment	@# @;


1.1
date	2005.02.25.22.19.37;	author lucier;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@;;; File automatically generated (Don't touch).

(define-generic (->Pre-Class (o)))
(define-method (->Pre-Class (o Pre-Class)) o)


(define-generic (->Handy-Class (o)))
(define-method (->Handy-Class (o Handy-Class)) o)


(define-generic (->MeroonV2-Class (o)))
(define-method (->MeroonV2-Class (o MeroonV2-Class)) o)


(define-generic (->Applyable-Object (o)))
(define-method (->Applyable-Object (o Applyable-Object)) o)


(define-generic (->Generic-1 (o)))
(define-method (->Generic-1 (o Generic-1)) o)


(define-generic (->Generic-N (o)))
(define-method (->Generic-N (o Generic-N)) o)


(define-generic (->Pre-Field (o)))
(define-method (->Pre-Field (o Pre-Field)) o)


(define-generic (->Field (o)))
(define-method (->Field (o Field)) o)


(define-generic (->Mono-Field (o)))
(define-method (->Mono-Field (o Mono-Field)) o)


(define-generic (->Poly-Field (o)))
(define-method (->Poly-Field (o Poly-Field)) o)


(define-generic (->Dispatcher (o)))
(define-method (->Dispatcher (o Dispatcher)) o)


(define-generic (->Immediate-Dispatcher (o)))
(define-method (->Immediate-Dispatcher (o Immediate-Dispatcher)) o)


(define-generic (->Subclass-Dispatcher (o)))
(define-method (->Subclass-Dispatcher (o Subclass-Dispatcher)) o)


(define-generic (->Indexed-Dispatcher (o)))
(define-method (->Indexed-Dispatcher (o Indexed-Dispatcher)) o)


(define-generic (->Linear-Dispatcher (o)))
(define-method (->Linear-Dispatcher (o Linear-Dispatcher)) o)


(define-generic (->Global-Dispatcher (o)))
(define-method (->Global-Dispatcher (o Global-Dispatcher)) o)


(define-generic (->Tracing-Dispatcher (o)))
(define-method (->Tracing-Dispatcher (o Tracing-Dispatcher)) o)


(define-generic (->Anomaly (o)))
(define-method (->Anomaly (o Anomaly)) o)


(define-generic (->Warning (o)))
(define-method (->Warning (o Warning)) o)


(define-generic (->View (o)))
(define-method (->View (o View)) o)


(define-generic (->Virtual-Field (o)))
(define-method (->Virtual-Field (o Virtual-Field)) o)


;;; end of Coercers.scm
@
