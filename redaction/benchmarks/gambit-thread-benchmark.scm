(include "bench_.scm")

(define (bench-yield)
  (let* ((t2 (make-thread (lambda () (let loop () (thread-yield!) (loop)))))
         (t1 (make-thread (lambda ()
                            (do ((i 0 (+ i 1)))
                                ((= i 500000)
                                 (thread-terminate! t2))
                              (thread-yield!))))))
    (thread-quantum-set! t1 +inf.0)
    (thread-quantum-set! t2 +inf.0)
    (thread-start! t2)
    (thread-start! t1)
    (time-expr (thread-join! t1))))

(define (bench-send-receive)
  (let* ((t2 (make-thread (lambda () (let loop ()
                                       (thread-receive)
                                       (thread-yield!)
                                       (loop)))))
         (t1 (make-thread (lambda ()
                            (do ((i 0 (+ i 1)))
                                ((= i 500000)
                                 (thread-terminate! t2))
                              (thread-send t2 'ping)
                              (thread-yield!))))))
    (thread-quantum-set! t1 +inf.0)
    (thread-quantum-set! t2 +inf.0)
    (thread-start! t2)
    (thread-start! t1)
    (time-expr (thread-join! t1))))

#;(define (bench-recv)
  (let* ((c2 (new-corout 'c2 (lambda ()
                               (let loop ()
                                 (recv ((,sender ping) (! sender 'pong)))
                                 (loop)))))
         (c1 (new-corout
              'c1 (lambda ()
                    (do ((i 0 (+ i 1)))
                        ((= i 500000) (kill-all! 'done))
                      (! c2 (list (current-corout) 'ping))
                      (recv (pong 'ok)))))))
    (time-expr (boot (list c1 c2)))))

(pp `(gambit-thread yield: ,(bench-yield)))
(pp `(gambit-thread send-receive: ,(bench-send-receive)))

