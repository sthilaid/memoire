
#+TITLE: Utilisation d'un système orienté objets
#+STYLE: <link rel="stylesheet" type="text/css" href="style.css" />
#+FILETAGS: maîtrise

* Besoins

  Le besoin d'avoir un système orienté objet s'est fait rapidement
  sentir lorsque space-invaders a été developpé. Entre autre, la
  version initiale effectué de manière manuelle du "double dispatch",
  ce qui est laborieux et pénible à écrire.

  De plus, la nature des objets du jeux faisaient en sorte que
  plusieurs champs pouvaient être hérités.

  Afin que le système d'objets puisse être utilisé dans le jeu, le
  coût associé à son utilisation doit être faible, afin de ne pas
  ralentir la cadence du jeux.

  Aussi, une interface à la CLOS semblait être une bonne approche,
  tant parce que CLOS est un système connu (donc facile à utiliser)
  qui a fait ses preuves et parce que le principe de fonction
  génériques semble mieux adapté à un système ayant des fonctions de
  premières classes, puisqu'en utilisant des fonctions génériques,
  celle-ci peuvent être utilisées avec des fonctions d'ordre supérieur
  très facilement.

* Essaie d'implémentations existantes [2008-08-15 Fri]

  Au départ, j'ai voulu utiliser des systèmes objets déjà existant
  afin de ne pas perdre de temps. Ainsi, le système objets nommé
  "oops" semblait un bon candidat, puisque ce dernier possédait
  plusieurs "features" intéressantes comme l'héritage multiple et le
  dispatch multiple. 

  Après avoir réussi à intégrer ce système au jeu, des performances
  pitoyables ont été observées. En effet, après avoir discuter avec
  l'auteur du système, il m'a avoué que le système avait été écrit
  sans soucis réel des performances. Ce fut donc un échec, mais le
  code écrit semblait beaucoup plus élégant que la version "manuelle"
  précédente.

  Par la suite, nous avons regardé le système objet nommé Meroon. Ce
  dernier semblait plus efficace, mais il paraissait plus limité en
  terme de possibilité. Entre autre, il n'y avait pas d'héritage
  multiple de permis. Aussi, il n'était pas possible d'avoir des
  champs de classes statiques (communs à toutes les instances). Et
  donc, nous n'avons pas voulu nous limiter nos possibilitées à cause
  des choix fait par un autre développeur. C'est là que nous est venu
  le besoin d'écrire nous même notre propre système, qui pourrait donc
  être moulé directement à nos besoins.

* Écriture [2008-10-15 Wed]

  Après l'identification des besoins du système objets:

  - Rapidité d'accès aux champs
  - Rapidité de dispatch multiple
  - Héritage multiple et polymorphisme
  - Champs statiques
  - blabla

  L'écriture du système comme tel a débuté. Le developpement des
  fonctionnalités principales a pris beaucoup moins de temps que je ne
  l'aurais cru possible. Après environ deux semaines, nous avions déjà
  des instances de classes effectuant de l'héritage et un certain
  degré de polymorphisme (accès aux champs).

  blabla

** Ajout de fonctions génériques à arité variable et constructeurs <2009-02-17 Tue>
   
   Après avoir fait la ré-écriture du système de simulation par thread
   avec le système objet, nous avons réalisé qu'il y avait un problème
   au niveau de la construction d'instances du système objets. En
   effet, les nouveau threads doivent toujours être initialisés
   correctement avant de pouvoir être utilisé, mais rien ne permettait
   facilement de pouvoir effectuer de tels initialisations chez les
   sous-classes de la classe corout. Ainsi, il est maintenant possible
   de définir un ou plusieurs constructeurs pour une classe données
   avec le mot clé constructor:. Ils peuvent ensuite être invoqués via
   la fonction générique init! ou plus facilement par la macro
   "new". Par exemple:

#+BEGIN_SRC scheme
(define-class point () (slot: x) (slot: y)
  (constructor: (lambda (obj x) (point-x-set! obj x)
                                (point-y-set! obj x)))
  (constructor: (lambda (obj x y) (point-x-set! obj x)
                                  (point-y-set! obj y))))
(new point 1)   ; ~> (1,1)
(new point 1 2) ; ~> (1,2)
#+END_SRC

   Afin de pouvoir implanter ces fonctionnalitées, des modifications
   ont dû être apportées aux fonctions génériques afin que celles-ci
   supportent une arité multiple. On peut ainsi, maintenant avoir:

#+BEGIN_SRC scheme
(define-generic toto)
(define-method (f (p point)) (point-x p))
(define-method (f (p1 point) (p2 point)) (+ (f p1) (f p2)))
(f (new point 1) (new point 2 4)) ; ~> 3
#+END_SRC
