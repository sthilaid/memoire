(include "bench_.scm")

(define (bench-yield)
  (let* ((t2 (make-thread (lambda () (let loop () (thread-yield!) (loop)))))
         (t1 (make-thread (lambda ()
                            (do ((i 0 (+ i 1)))
                                ((= i (/ benchmark-limit 2))
                                 (thread-terminate! t2)
                                 'ok)
                              (thread-yield!))))))
    (thread-quantum-set! t1 +inf.0)
    (thread-quantum-set! t2 +inf.0)
    (thread-start! t2)
    (thread-start! t1)
    (time-expr (thread-join! t1))))

(define (bench-!)
  (let* ((t1 (make-thread (lambda ()
                            (do ((i 0 (+ i 1)))
                                ((= i benchmark-limit)
                                 'ok)
                              (thread-send (current-thread) 'ping))))))
    (thread-quantum-set! t1 +inf.0)
    (thread-start! t1)
    (time-expr (thread-join! t1))))

(define (bench-?)
  (let* ((dt #f)
         (t1 (make-thread (lambda ()
                            (do ((i 0 (+ i 1)))
                                ((= i benchmark-limit) 'ok)
                              (thread-send (current-thread) 'ping))
                            (time-expr
                             (do ((i 0 (+ i 1)))
                                 ((= i benchmark-limit)
                                  'ok)
                               (thread-receive)))))))
    (thread-quantum-set! t1 +inf.0)
    (thread-start! t1)
    (thread-join! t1)))

(define (bench-?-timeout)
  (let* ((t1 (make-thread (lambda ()
                            (do ((i 0 (+ i 1)))
                                ((= i benchmark-limit) 'ok)
                              (thread-send (current-thread) 'ping))
                            (time-expr
                             (do ((i 0 (+ i 1)))
                                 ((= i benchmark-limit)
                                  'ok)
                               (thread-receive 0. 'ok)))))))
    (thread-quantum-set! t1 +inf.0)
    (thread-start! t1)
    (thread-join! t1)))

(define (bench-!-?)
  (let* ((t2-miror (make-parameter #f))
         (t1 (make-thread (lambda ()
                            (do ((i 0 (+ i 1)))
                                ((= i benchmark-limit)
                                 (thread-terminate! (t2-miror)))
                              (thread-receive)))))
         (t2 (make-thread (lambda ()
                            (let loop () (thread-send t1 'allo) (loop))))))
    (t2-miror t2)
    (thread-quantum-set! t1 +inf.0)
    (thread-quantum-set! t2 +inf.0)
    (thread-start! t1)
    (thread-start! t2)
    (time-expr (thread-join! t1))))

(pp `(gambit-thread yield: ,(bench-yield)))
(pp `(thread-simulation !: ,(bench-!)))
(pp `(thread-simulation ?: ,(bench-?)))
(pp `(thread-simulation ?-timeout: ,(bench-?-timeout)))
(pp `(thread-simulation !-?: ,(bench-!-?)))

