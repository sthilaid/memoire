<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
               "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
lang="en" xml:lang="en">
<head>
<title>Langage spécifique à l'écriture d'agents dans un jeu</title>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
<meta name="generator" content="Org-mode"/>
<meta name="generated" content="2009/02/02 09:47:46 AM"/>
<meta name="author" content=""/>
<style type="text/css">
  html {
	font-family: Times, serif;
	font-size: 12pt;
  }
  .title { text-align: center; }
  .todo  { color: red; }
  .done { color: green; }
  .timestamp { color: grey }
  .timestamp-kwd { color: CadetBlue }
  .tag { background-color:lightblue; font-weight:normal }
  .target { }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
  }
  table { border-collapse: collapse; }
  td, th {
	vertical-align: top;
	<!--border: 1pt solid #ADB9CC;-->
  }
  dt { font-weight: bold; }
</style>
</head><body>
<h1 class="title">Langage spécifique à l'écriture d'agents dans un jeu</h1>


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Prototypage du langage</a>
<ul>
<li><a href="#sec-1.1">1.1 Synchronisation des agents via les "fair threads"</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">1 Prototypage du langage <span class="timestamp">2009-01-29 Thu</span></h2>
<div id="text-1">

<p>Afin de pouvoir concevoir un DSL, un prototype du jeu space-invaders
doit être écrit afin de permettre d'observer comment le comportement
d'agents pourrait être bien représenté sous forme de code abstrait,
qui serait par la suite traduit en Scheme.
</p>
<p>
Par exemple, pour un invader, on pourrait avoir du code ressemblant à:
</p>


<pre class="src">(define-agent (Invader stimulus)
  (<span style="color: #a020f0;">case</span> stimulus
    ((turn)
     (unless (<span style="color: #a020f0;">or</span> (exists? player-explosion)
                 (game-paused?))
             (<span style="color: #a020f0;">begin</span> (<span style="color: #a020f0;">if</span> (not (received-godown-warning?))
                        (move self dx)
                        (move self (- dy)))
                    <span style="color: #b22222;">;; </span><span style="color: #b22222;">Wake up the next invader
</span>                    (Invader (next-invader self) 'turn))))
    ((collision self -&gt; wall)
     (<span style="color: #a020f0;">for-each</span> send-godown-warning other-invaders)
     (set! dx (- dx))
     (move self dx)
     (move self (- dy)))
    ((collision self <span style="color: #228b22;">&lt;-&gt;</span> player)
     (game-over!))))
</pre>



</div>

<div id="outline-container-1.1" class="outline-3">
<h3 id="sec-1.1">1.1 Synchronisation des agents via les "fair threads"</h3>
<div id="text-1.1">

<p>L'utilisation des "<a href="http://www-sop.inria.fr/members/Manuel.Serrano/publi/sbs-ppdp04.html">fair threads</a>" décrits par Manuel Serrano
permettrait de pouvoir expliciter les contraintes temporelles se
retrouvant dans le je de space invaders de manière assez élégante,
par exemple, pour la synchronisation d'affichage entre les
différentes lignes d'invaders, on pourrait avoir:
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col><col align="left"></col><col align="left"></col>
<thead>
<tr><th>time frame</th><th>Botom Inv</th><th>Middle Inv</th><th>Upper Inv</th></tr>
</thead>
<tbody>
<tr><td>1</td><td>move</td><td>[wait mid]</td><td>[wait up]</td></tr>
<tr><td></td><td>signal redraw</td><td></td><td></td></tr>
<tr><td></td><td>yield</td><td></td><td></td></tr>
</tbody>
<tbody>
<tr><td>2</td><td>signal mid</td><td>move</td><td></td></tr>
<tr><td></td><td>wait bot</td><td>signal redraw</td><td></td></tr>
<tr><td></td><td></td><td>yield</td><td></td></tr>
</tbody>
<tbody>
<tr><td>3</td><td></td><td>signal up</td><td>move</td></tr>
<tr><td></td><td></td><td>wait mid</td><td>signal redraw</td></tr>
<tr><td></td><td></td><td></td><td>yield</td></tr>
</tbody>
<tbody>
<tr><td>4</td><td></td><td></td><td>signal bottom</td></tr>
<tr><td></td><td></td><td></td><td>wait up</td></tr>
</tbody>
</table>


<p>
Par contre, il semble y avoir un probleme lorsqu'il n'y a plus
d'invaders qui existent, pour une rangée donnée (deadlock). Ainsi,
le comportement des invaders doit être dynamique et modifié en
cours de route. Ainsi, si tous les invaders de la ligne du bas sont
tués, le comportement des lignes subsistance devra être modifiée
à:
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<col align="left"></col><col align="left"></col><col align="left"></col>
<thead>
<tr><th>time frame</th><th>Middle Inv</th><th>Upper Inv</th></tr>
</thead>
<tbody>
<tr><td>1</td><td>move</td><td></td></tr>
<tr><td></td><td>signal redraw</td><td></td></tr>
<tr><td></td><td>yield</td><td></td></tr>
</tbody>
<tbody>
<tr><td>2</td><td>signal up</td><td>move</td></tr>
<tr><td></td><td>wait mid</td><td>signal redraw</td></tr>
<tr><td></td><td></td><td>yield</td></tr>
</tbody>
<tbody>
<tr><td>3</td><td></td><td>signal <b>mid</b></td></tr>
<tr><td></td><td></td><td>wait up</td></tr>
</tbody>
</table>



<p>
De plus, l'utilisation d'un style de programmation à la FRP
(functionnal reactive programming), permettrait de pouvoir aussi
bien identifier toute les autres contrainte du jeu. Par exemple,
afin de mettre en pause le jeu, il ne suffit que de creer les
signaux correspondant.
</p>
<p>
Pour inclure de tels comportements, il faudrait ajouter au code
d'un invader:
</p>


<pre class="src">(define-agent (Invader stimulus)
  (<span style="color: #a020f0;">case</span> stimulus
    ((turn)
     (wait (line-id self))
     (<span style="color: #a020f0;">begin</span> (<span style="color: #a020f0;">if</span> (not (received-godown-warning?))
                (move self dx)
                (move self (- dy)))
            <span style="color: #b22222;">;; </span><span style="color: #b22222;">must yield to ensure all the inv of the row moved
</span>            (yield)
            (signal 'redraw)
            (yield) <span style="color: #b22222;">; </span><span style="color: #b22222;">necessary?
</span>            (signal (next-row self))
            (Invader self turn) <span style="color: #b22222;">; </span><span style="color: #b22222;">temp patch to loop here...
</span>            ))
    ((player-explosion)
     (wait player-explosion-end))
    ((game-paused)
     (wait game-unpaused))
    ((collision self -&gt; wall)
     (<span style="color: #a020f0;">for-each</span> send-godown-warning other-invaders)
     (set! dx (- dx))
     (move self dx)
     (move self (- dy)))
    ((collision self <span style="color: #228b22;">&lt;-&gt;</span> player)
     (game-over!))
    ((destroyed invader)
     (<span style="color: #a020f0;">if</span> (zero? (length (next-row self)))
         (next-row-set! self (get-next-available-row))))))
</pre>

</div>
</div>
</div>
<div id="postamble"><p class="author"> Author: 
<a href="mailto:dave@david-laptop">&lt;dave@david-laptop&gt;</a>
</p>
<p class="date"> Date: 2009/02/02 09:47:46 AM</p>
<p>HTML generated by org-mode 6.05b in emacs 22<p>
</div></body>
</html>
