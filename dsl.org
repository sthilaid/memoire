
#+TITLE: Langage spécifique à l'écriture d'agents dans un jeu
#+STYLE: <link rel="stylesheet" type="text/css" href="style.css" />
#+FILETAGS: maîtrise

* Prototypage du langage [2009-01-29 Thu]
  Afin de pouvoir concevoir un DSL, un prototype du jeu space-invaders
  doit être écrit afin de permettre d'observer comment le comportement
  d'agents pourrait être bien représenté sous forme de code abstrait,
  qui serait par la suite traduit en Scheme.

  Par exemple, pour un invader, on pourrait avoir du code ressemblant à:

#+BEGIN_SRC scheme
(define-agent (Invader stimulus)
  (case stimulus
    ((turn)
     (unless (or (exists? player-explosion)
                 (game-paused?))
             (begin (if (not (received-godown-warning?))
                        (move self dx)
                        (move self (- dy)))
                    ;; Wake up the next invader
                    (Invader (next-invader self) 'turn))))
    ((collision self -> wall)
     (for-each send-godown-warning other-invaders)
     (set! dx (- dx))
     (move self dx)
     (move self (- dy)))
    ((collision self <-> player)
     (game-over!))))
#+END_SRC

** Synchronisation des agents via les "fair threads" <2009-02-03 Tue>

   L'utilisation des "[[http://www-sop.inria.fr/members/Manuel.Serrano/publi/sbs-ppdp04.html][fair threads]]" décrits par Manuel Serrano
   permettrait de pouvoir expliciter les contraintes temporelles se
   retrouvant dans le je de space invaders de manière assez élégante,
   par exemple, pour la synchronisation d'affichage entre les
   différentes lignes d'invaders, on pourrait avoir:
     
   |------------+---------------+---------------+---------------|
   | time frame | Botom Inv     | Middle Inv    | Upper Inv     |
   |------------+---------------+---------------+---------------|
   |          1 | move          | [wait mid]    | [wait up]     |
   |            | signal redraw |               |               |
   |            | yield         |               |               |
   |------------+---------------+---------------+---------------|
   |          2 | signal mid    | move          |               |
   |            | wait bot      | signal redraw |               |
   |            |               | yield         |               |
   |------------+---------------+---------------+---------------|
   |          3 |               | signal up     | move          |
   |            |               | wait mid      | signal redraw |
   |            |               |               | yield         |
   |------------+---------------+---------------+---------------|
   |          4 |               |               | signal bottom |
   |            |               |               | wait up       |
   |------------+---------------+---------------+---------------|

   Par contre, il semble y avoir un probleme lorsqu'il n'y a plus
   d'invaders qui existent, pour une rangée donnée (deadlock). Ainsi,
   le comportement des invaders doit être dynamique et modifié en
   cours de route. Ainsi, si tous les invaders de la ligne du bas sont
   tués, le comportement des lignes subsistance devra être modifiée
   à:

   | time frame | Middle Inv    | Upper Inv     |
   |------------+---------------+---------------|
   |          1 | move          |               |
   |            | signal redraw |               |
   |            | yield         |               |
   |------------+---------------+---------------|
   |          2 | signal up     | move          |
   |            | wait mid      | signal redraw |
   |            |               | yield         |
   |------------+---------------+---------------|
   |          3 |               | signal *mid*  |
   |            |               | wait up       |
   |------------+---------------+---------------|


   De plus, l'utilisation d'un style de programmation à la FRP
   (functionnal reactive programming), permettrait de pouvoir aussi
   bien identifier toute les autres contrainte du jeu. Par exemple,
   afin de mettre en pause le jeu, il ne suffit que de creer les
   signaux correspondant.

   Pour inclure de tels comportements, il faudrait ajouter au code
   d'un invader:

#+BEGIN_SRC scheme
(define-agent Invader
  (wait-for
   ((turn (line-id self))
    (move self dx)
    (signal 'moved (find-barrier (invader-row self))))
   ((wall-collision row)
    ;; not very efficient...?
    (if (= row (invader-row self))
        (begin (move self (- dy))
               (invader-invert-speed self)
               ;; need to move back the invader so its no longer in the wall
               (move self dx))))
   ((player-explosion)
    (wait player-explosion-end))
   ((game-paused)
    (wait game-unpaused))
   ;; Must be integrated into collision resolution
   #;
   ((collision self -> wall)
    ;; warn the barriers of a wall collision
    (for-each (lambda (b) (signal 'go-down-warning b)) all-row-barriers))))

(define-class Barrier () (slot: row) (slot: agent-arrived) (slot: warned?))
(define-agent Barrier
  (wait-for
   ((go-down-warning)
    (Barrier-warned?-set! self #t))
   ((moved row)
    (if (= row (Barrier-row self))
        (update! self Barrier agent-arrived (lambda (n) (+ n 1)))
        (begin
         (if (>= (Barrier-agent-arrived self) (row-size (Barrier-row self)))
             (begin
               (Barrier-agent-arrived-set! self 0)
               (if (Barrier-warned? self)
                   (signal `(wall-collision ,(Barrier-row self))))
               (Barrier-warned?-set! self #f)
               ;; Sync with all the sent signals (wait until the next intant
               (yield)
               (signal `(redraw ,(Barrier-row self))))))))))


(define-agent redraw-agent
  (wait-for
   ((redraw last-row)
    (process-user-input)
    (render current-level)
    (yield) ; Beginning of the next instant
    (signal `(turn ,(next-row last-row)))
    (wait 'redraw))
   ((destroyed invader)
    (if (null? (invaders-from-row (invader-row invader)))
        (next-row-set! self (get-next-available-row))))))
#+END_SRC

        Pour cette version, le flot des signaux est plus complexe, si
        l'on suppose qu'il y aie 3 invaders par rangées, on peut
        imaginer le flot comme étant le suivant:

  | Instant | Inv1          | Inv2          | Inv3                  | Barrier-r1       | redraw        |
  |---------+---------------+---------------+-----------------------+------------------+---------------|
  |       1 | /[turn 1]/    | /[turn 1]/    | /[turn 1]/            |                  |               |
  |         | move dx       | move dx       | move dx               |                  |               |
  |         | *sig moved 1* | *sig moved 1* | -> *sig warn-go-down* | /[moved]/        |               |
  |         | (_yield_)     | (_yield_)     | *sig moved 1*         | ar = 0+1         |               |
  |         |               |               | (_yield_)             | /[moved]/        |               |
  |         |               |               |                       | ar = 1+1         |               |
  |         |               |               |                       | /[warn-go-down]/ |               |
  |         |               |               |                       | warned = #t      |               |
  |         |               |               |                       | /[moved]/        |               |
  |         |               |               |                       | ar = 2+1         |               |
  |         |               |               |                       | ar = 0           |               |
  |         | /[wall-coll]/ | /[wall-coll]/ | /[wall-coll]/         | *sig wall-col*   |               |
  |         | move -dy      | move -dy      | move -dy              | warned = #f      |               |
  |         | dx = -dx      | dx = -dx      | dx = -dx              | _yield_          |               |
  |         | move dx       | move dx       | move dx               |                  |               |
  |         | (_yield_)     | (_yield_)     | (_yield_)             |                  |               |
  |---------+---------------+---------------+-----------------------+------------------+---------------|
  |       2 |               |               |                       | *sig redraw*     | /[redraw]/    |
  |         |               |               |                       | (_yield_)        | process-input |
  |         |               |               |                       |                  | render        |
  |         |               |               |                       |                  | *yield*       |
  |---------+---------------+---------------+-----------------------+------------------+---------------|
  |       3 |               |               |                       |                  | sig turn 2    |
  |         |               |               |                       |                  | (_yield_)     |
        
** Synchronisation des agents avec une syntax à la Termite <2009-02-05 Thu 14:15>
   Nous voulons ici essayer de reprenre les exemples de code abstraits
   écrits dans une syntax à la Termite. Puisque Termite utilise du
   pattern matching sur la reception de messages, on peut également
   arriver à écrire facilement les contraintes de synchronisations
   données plus haut dans un tel language.

#+BEGIN_SRC scheme
(define (invader self)
  (lambda ()
    (let loop ()
      (recv
       ('turn
        (begin (move self dx)
               (! (find-barrier (invader-row self))
                  `(moved ,(invader-row self)))))
       ('wall-collision
        (begin (move self (- dy))
               (invader-invert-speed self)
               ;; need to move back the invader so its no longer in the wall
               (move self dx)))
       (('player-explosion)
        (begin (wait player-explosion-end)))
       (('game-paused)
        (begin (wait game-unpaused))))
      (loop))))
  
(define-class Barrier () (slot: row) (slot: agent-arrived) (slot: warned?))
(define (barrier self)
  (lambda ()
    (define (state1)
      (recv
       (('go-down-warning)
        (begin (Barrier-warned?-set! self #t)
               (state1)))
       (('moved ,(Barrier-row self)) ; ',' escape not supported by termite
        (begin
          (update! self Barrier agent-arrived (lambda (n) (+ n 1)))
          (if (>= (Barrier-agent-arrived self) (row-size (Barrier-row self)))
              (begin
                (Barrier-agent-arrived-set! self 0)
                (if (Barrier-warned? self)
                    (for-each (lambda (i)
                                (! i `wall-collision))
                              (row-invaders (Barrier-row self))))
                (Barrier-warned?-set! self #f)
                (state2))
              (state1))))))
    (define (state2)
      (recv
       (('moved ,(Barrier-row self))
        (begin
          (update! self Barrier agent-arrived (lambda (n) (+ n 1)))
          (if (>= (Barrier-agent-arrived self) (row-size (Barrier-row self)))
              (begin
                (Barrier-agent-arrived-set! self 0)
                (! redraw-agent `(redraw ,(Barrier-row self)))
                (state1))
              (state2))))))
    state1))

(define (redraw-agent self)
  (lambda ()
    (let loop ()
     (recv
      (('redraw last-row)
       (process-user-input)
       (render current-level)
       (for-each (lambda (i) (! i `turn))
                 (row-invaders (next-row last-row)))
       (loop))))))
#+END_SRC

   Puisqu'il n'existe pas de moyen de synchronisation autre que les
   messages en Termite, il est nécessaire que la barrière soit
   utilisée une 2ième fois lorsque l'on attend que la correction de
   mouvement effectuée soit terminée, après une collision avec un
   mur. Quoi que plus simple syntaxiquement, l'utilisation directe de
   Termite pause quelques problèmes, entre autres:

   - On doit connaître tous les threads à qui l'ont envoi un
     message
   - Problème de fuite de mémoire pour les événements non gérés

   De plus, le pseudo-code utilise aussi des features non-existants de
   Termites, comme les échappement de patterns (effectués avec le
   charactère #\,). De plus, la doc de Termite stipule clairement que
   les *effets de bords* ne doivent pas être utilisés, ce qui n'est pas
   du tout le cas du code de cet exemple...

** D'autres exemples de synchronisation d'agents <2009-02-06 Fri 10:48>
   Ici, l'exemple du déplacement des invaders a été repris, mais leur
   comportement a été légèrement modifié. Maintenant, les invaders
   doivent changer de couleurs, se déplacer, puis changer de couleur à
   nouveau. Voici un pseudo-code effectuant plus ou moins la tâche:

#+BEGIN_SRC scheme
;; Messaging lists
(define messaging-lists (make-table test: equal?))
(define (get-msg-list list-id)
  (table-ref messaging-lists list-id #f))
(define (subscribe id agent)
  (cond ((table-ref messaging-lists list-id #f)
         => (lambda (lst) (cons agent lst)))
        (else (table-set! messaging-lists list-id (list agent)))))
(define (unsubscribe id agent)
  (let ((msg-list (get-msg-list list-id)))
    (and msg-list
         (list-remove! msg-list agent))))
(define (broadcast list-idmsg)
  (let ((msg-list (get-msg-list list-id)))
    (and msg-list
         (for-each (lambda (subscriber) (! subscriber msg))
                   msg-list))))

;; Space Invader behaviour states
(define (invader self)
  (define (main-state)
    (recv
     ('move
      (begin (move self dx)
             (! (find-barrier (invader-row self)) 'moved)
             (main-state)))

     ('change-color
      (begin (update! self invader color (lambda (c) (next-color c)))
             (! (find-barrier (invader-row self)) 'changed-color)
             (main-state)))

     ('wall-collision
      (begin (move self (- dy))
             (invader-invert-speed self)
             ;; need to move back the invader so its no longer in the wall
             (move self dx)
             (! (find-barrier (invader-row self)) 'moved)
             (main-state)))

     ('player-explosion
      (begin (player-expl-state)))

     ('game-paused
      (begin (paused-state)))))

  (define (player-expl-state)
    (recv
     ('game-paused (player-expl-state)) ; assuming that the expl obj gets paused
     ('player-explosion-end (main-state))))

  (define (paused-state)
    (recv 
     ('game-unpaused (main-state))))
  ;; init state
  main-state)
  
(define-class Barrier () (slot: agent-arrived))
(define-class Inv-Controller (Barrier) (slot: row))
(define-macro (define-wait-state state-name msg condition . barrier-open-code)
  `(define (,state-name)
     (recv (,msg
            (begin
              (update! self Barrier agent-arrived (lambda (n) (+ n 1)))
              (if (>= (Barrier-agent-arrived self) ,condition)
                  (begin
                    (Barrier-agent-arrived-set! self 0)
                    ,@barrier-open-code)
                  (,state-name)))))))

;; Problemes ici au niveau du redraw!! doit etre fait entre chaque etat...
(define (invader-controller self)
  (define (inv-nb) (row-size (Inv-Controller-row self)))
  (lambda ()
    (define-wait-state state1 'changed-color (inv-nb)
                    (broadcast (row-invaders (Inv-Controller-row self) 'move))
                    (state2))
    
    (define-wait-state state2 'moved (inv-nb)
                    (recv 
                     ('go-down-warning
                      (begin (Inv-Controller-warned?-set! self #f)
                             (broadcast (row-invaders (Inv-Controller-row self))
                                        'wall-collision)
                             (state2)))
                     ;; if no wall collision, then proceed to the next state
                     (after 0 (state3))))
    
    (define-wait-state state3 'changed-color (inv-nb)
                    (! redraw-agent `(redraw ,(Inv-Controller-row self)))
                    (state1))
    ;; init state
    state1))

(define (redraw-agent self)
  (lambda ()
    (let loop ()
     (recv
      (('redraw last-row)
       (begin
        (process-user-input)
        (render current-level)
        (broadcast (row-invaders (next-row last-row)) 'change-color)
        (loop)))))))
#+END_SRC

   On voit que nous avons *réussi à mieux abstraire* ici le comportement
p   des barrières. Par contre, ce comportement *n'est pas modulaire* et
   on peut difficilement y ajouter au besoin du traitement (comme pour
   le traitement du message "go-down-warning". 

   Aussi, il semble y avoir toujours un problème au niveau de la
   concurence. Marc a suggéré d'utilisé un "double buffer" d'états
   afin de prévenir le problème. Ceci impliquerait donc que chaques
   objets devraient possèder en *double l'espace utilisé*. Aussi, le
   moment pour le changement de buffer n'est pas clair. Tout des être
   en arrêt afin que le redraw et le changement puissent être
   correctes.

   On peut modéliser les états du thread invader de la manière suivante:

#+BEGIN_EXAMPLE
             +-----------+     'player-expl     +-----------------------+
             |           |--------------------->|                       |
             | main-loop |                      | player-explosion-wait |
             |           |<---------------------|                       |
             +-----------+   'player-expl-end   +-----------------------+
               |    ^
               |    |
  'game-paused |    | 'game-unpaused
               v    |
             +--------+
             |        |
             | paused |
             |        |
             +--------+
#+END_EXAMPLE

   On peut aussi d'écrire les états du controlleur d'invaders ainsi:

#+BEGIN_EXAMPLE
               +---------------------------------------+
               |                                       |
               v                                       |
          +--------+          +--------+          +--------+
          |        |          |        |          |        |
          | state1 |--------->| state2 +--------->| state3 |
          |        |          |        | timeout  |        |
          +--------+          +--------+          +--------+
                                ^    |     
                                |    |     
                                +----+     
                           'go-down-warning
#+END_EXAMPLE

** Synchronisation des rafraîchissements <2009-03-06 Fri 11:27>

   Afin de permettre le rafraîchissement d'écran au *bon* moments, un
   synchronisations avec les agents présents s'impose. Pour y arriver,
   le concept de list de message sera utilisé en combinaison avec des
   barrières dynamiques. En effet, on dira qu'un rafraîchissemnt sera
   fait chaque /instant/, où le concept d'instants est similaire à
   celui retrouvé dans les [[Synchronisation des agents via les "fair threads"][fair threads]]. Par contre, les agents actifs
   doivent eux-même s'inscrire à la liste de messagerie lorsqu'ils
   considèrent qu'ils doivent être synchronisés avec les instants et
   doivent se désinscrire lorsque ce n'est plus le cas.

   Ainsi, l'agent virtuel de rafraîchissement n'est rien d'autre
   qu'une barrière dynamique attendant tous les agents actifs. La
   barrière est dite dynamique puisqu'à la reception de chaque
   message, le nombre d'agents actifs est recalculé, pour prendre en
   compte les potentiels nouveaux agents actifs. On obtient un code
   ressemblant à:

#+BEGIN_SRC scheme
(define-class Barrier (corout) (slot: agent-arrived)
  (constructor: (lambda (obj thunk)
                  (init! cast: '(corout * *) obj
                         (gensym 'barrier)
                         thunk)
                  (Barrier-agent-arrived-set! obj 0))))

(define-class redraw-agent (Barrier)
  (constructor: (lambda (obj level)
                  (init! cast: '(Barrier *) obj (behaviour obj level)))))

(define-macro (define-wait-state state-name msg condition . barrier-open-code)
  `(define (,state-name)
     (recv (,msg
            (begin
              (update! (self) Barrier agent-arrived (lambda (n) (+ n 1)))
              (if (>= (Barrier-agent-arrived (self)) ,condition)
                  (begin
                    (Barrier-agent-arrived-set! (self) 0)
                    ,@barrier-open-code)
                  (,state-name)))))))

(define-method (behaviour (obj redraw-agent) level)
  (define-wait-state main-state redraw
    (msg-list-size 'instant-components)
    (begin
        (process-user-input level)
        (thread-send user-interface-thread `(redraw ,level))
        (main-state)))
  main-state)
#+END_SRC


** Gestion de la mort d'un agent

   À priori, un agent représentant un objet du jeu /peut/ à *tout
   moment* être détruit/mourir et donc un méchanisme permettant
   d'uniformiser la mort d'objets doit être mis en place.

   Afin de rester consitant avec notre paradigme d'envoi de message,
   il serait conséquent d'utiliser l'envoi d'un message précis à un
   objet pour lui annoncer sa mort. Ainsi, un gestionnaire de message
   dynamique (dynamic handler) pourrait ainsi être utiliser afin de
   capter un message représenter la mort d'un objet comme par exemple
   'die', et ainsi traiter comme il se doit la mort de l'objet. On
   peut ainsi utiliser une fonction générique afin de permettre de
   faire le l'assignation dynamique du bon comportement à adopter en
   fonction du type de l'instance.

   Il y a par contre un problème qui peut se présenter?
