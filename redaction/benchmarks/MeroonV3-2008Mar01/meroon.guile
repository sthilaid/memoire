;;; $Id: meroon.guile,v 3.4 1998/01/20 12:33:27 queinnec Exp $
;;; Copyright (c) 1995 by Christian Queinnec. All rights reserved.

;;;                            *******************************
;;;                            Guile Adaptation for Meroon
;;;                            *******************************

;;; This file contains the necessary adaptation for Guile from Tom Lord.

;;; To interpret Meroon, just load this file then the meroon file
;;;     (load "meroon.guile")
;;;     (load "meroon.scm")

;;; This program is distributed in the hope that it will be useful.
;;; Use and copying of this software and preparation of derivative works
;;; based upon this software are permitted, so long as the following
;;; conditions are met:
;;;      o credit to the authors is acknowledged following current
;;;        academic behaviour
;;;      o no fees or compensation are charged for use, copies, or
;;;        access to this software
;;;      o this copyright notice is included intact.
;;; This software is made available AS IS, and no warranty is made about 
;;; the software or its performance. 

;;; Bug descriptions, use reports, comments or suggestions are welcome.
;;; Send them to    
;;;   <queinnec@polytechnique.fr>   or to:   <Christian.Queinnec@inria.fr>
;;;                                 or to:
;;;   Christian Queinnec                     Christian Queinnec
;;;   Laboratoire d'Informatique de l'X      INRIA -- Rocquencourt
;;;   Ecole Polytechnique                    Domaine de Voluceau, BP 105
;;;   91128 Palaiseau                        78153 Le Chesnay Cedex
;;;   France                                 France

;;;************************************************
;;;    Small, Efficient and Innovative Class System
;;;       Christian Queinnec  
;;;   \'Ecole Polytechnique & INRIA-Rocquencourt
;;;************************************************

;;; Check whether your SCM_INIT_PATH and SCHEME_LIBRARY_PATH are correct.
;;; Also check that your SLIB library is up to date. 
;;; 19 I 1998. This require form is no longer necessary.
;;;(require 'defmacro)

(defmacro define-meroon-macro (call . body)
  `(defmacro ,(car call) ,(cdr call) . ,body) )

(defmacro define-internal-meroon-macro (call . body)
  `(defmacro ,(car call) ,(cdr call) . ,body) )

(define-internal-meroon-macro (define-temporary call . body)
  (let ((name (if (symbol? call) call (car call))))
    `(begin (define ,call . ,body)
            (set! ,name ,name)
            ',name ) ) )

;;; Keywords change again in guile 1.2. Not to disturb we come back to 
;;; symbols.


;;; Conditional compilation: The variable *meroon-features* defines
;;; the features of Meroon to be taken into account when loading (or
;;; compiling Meroon). 

(define *meroon-features* 
  '( guile 1.2
     ) )

;;; Local Variables:
;;; mode: scheme
;;; End:

;;; End of adaptation of Meroon for Guile.
