
#+TITLE: Utilisation de systèmes de simulations
#+STYLE: <link rel="stylesheet" type="text/css" href="style.css" />

* Idée

  L'idée d'utiliser des système de simulation afin de contrôler le
  flot d'exécution m'est venue suite au cours de simulation
  stochastiques que j'ai suivi. En effet, en décrivant des simulations
  sous formes d'événements discrets ou de fils d'éxécution (threads),
  on pouvait facilement écrire le comportement de chaque individu, et
  ce de manière modulaire.

* Simulation à événements discrets [2008-05-15 Thu]

  La première forme de simulation utilisée fut une simulation à
  événements discrets. Le résultat de son utilisation est moyen,
  principalement dû au fait que les objets possèdent la pluspart du
  temps des comportements + ou - infinis, ou dont la durée n'est pas
  pré-déterminée. Par exemple, 

#+BEGIN_SRC scheme
;; Event that moves a mothership and handles its collisions.
(define (create-mothership-event level)
  (define mothership-event
    (synchronized-event-thunk level
      (let ((mothership (level-mothership level)))
        (if mothership
            (let ((collision-occured? (move-object! level mothership)))
              (if (or (not collision-occured?)
                      (is-explosion? collision-occured?)
                      (eq? collision-occured? 'message))
                  (in mothership-update-interval mothership-event)))))))
  mothership-event) 
#+END_SRC

  où l'on constate que l'évènement principal contrôlant les entitées
  de type "mothership" doit se re-schéduler plus tard dans le temps,
  et vérifier que le vaiseau "mothership" est toujours en un seul
  morceau avant de pouvoir continuer. Cela résulte donc en l'écriture
  de code pouvant facilement mener à des bugs (par exemple par l'oubli
  de la vérification de l'existance du "mothership" lors de
  l'exécution du prochain évenement.
  
  Par contre, cette approche semblait fonctionner assez bien pour la
  création d'animation, où justement la durée est décidée à l'avance.

#+BEGIN_SRC scheme
(define (create-text-flash-animation-event level msg-obj duration continuation)
  (define (flash-ev dt)
    (lambda ()
      (if (< dt duration)
          (begin (cycle-msg-state! msg-obj)
                 (in animation-delay (flash-ev (+ dt animation-delay))))
          (begin
            (game-object-color-set! msg-obj original-color)
            (in 0 continuation)))))
  (flash-ev 0)) 
#+END_SRC

  Comme l'illustre cet exemple d'animation de scintillement de text,
  on peut naturellement programmer une suite d'animations en utilisant
  des événements continuations. Par contre, la manipulation et la
  création de nouvelles continuations peut devienir fastidieuse.

* Simulations par fils d'exécutions [2008-07-07 Mon]

  Une approche qui nous a donc semblée plus naturelle pour la suite
  fut donc de transformer le système de simulation à événements
  discrets pour créer une simulations par "threads". Par contre, un
  des désavantages majeurs de la programmation parallèle est la
  difficulté, généralement reliée aux conditions de courses et aux
  problèmes de synchronisations.

  Ainsi, nous avons décider de créer un système de "threads"
  co-opératifs, changeant de context avec des yields explicites ou
  avec des sleeps. Ainsi, le comportement des objets était beaucoup
  plus compact et facile à écrire et comprendre. De plus, l'écriture
  de quelques macros ont permis de pouvoir composer facilement
  plusieurs animations.

#+BEGIN_SRC scheme
(define (create-mothership level)
  (synchronized-thunk level
    (let loop ((mothership (level-mothership level)))
      (if mothership
          (let ((collision-occured? (move-object! level mothership)))
            (if (or (not collision-occured?)
                    (explosion? collision-occured?)
                    (eq? collision-occured? 'message))
                (begin (sleep-for mothership-update-interval)
                       (loop (level-mothership level)))))))))
#+END_SRC

  Par exemple, on voit maintenant que le comportement d'un
  "mothership" se retrouve encapsulé dans une boucle infinie qui
  applique sont comportement à chaque itération.

  Similairement, des simples macros permettent de pouvoir composer de
  manière très élégante plusieurs animations. Par exemple, pour créer
  l'animation du début de jeu, il n'a suffit que d'utiliser le code
  suivant:

#+BEGIN_SRC scheme
(define (create-animation-A level)
  (lambda ()
    ;; messages declaration
    (let* ((play   ...) (space  ...) (score  ...)
           (mother ...) (hard   ...) (medium ...) (easy   ...)
           (anim-messages
            (list play space score mother hard medium easy)))
      (for-each (lambda (m) (level-add-object! level m)) anim-messages )
      (continue-with-thunk!
       (compose-thunks
        (animate-message play "PLAY")
        (animate-message space "SPACE   INVADERS")
        (create-animate-score-adv-table level))))))
#+END_SRC

  qui affiche de maniere successive du text et affiche par la suite la
  liste des points que valent chaque type de vaisseaux.

** Problèmes [2009-01-27 Tue]
   Après l'écriture et l'utilisation de ce système de thread (patch
   #241), plusieurs problèmes en sont ressortis. 

*** Problème de "polling" des threads endormis
    Le système de thread écrit possédait une file d'attente où chaque
    thread était associé à un thunk qui devra retourner #t lorsque le
    thread devra être réveillé. 

    Ainsi, lors de chaque retours aux scheduler, une vérification pour
    tous les threads endormis était effectuée (polling). Aussi, l'idée
    d'utiliser un thunk de conditions n'est pas bonne puisqu'il est
    possible que la condition devienne vraie et redevienne fausse
    avant de revenir au scheduler. Des variables de conditions
    devraient plustôt être utilisées pour ce genre de synchronisation.

*** Dépendance à l'horloge du système
    Le système utilisais directement le temps réel comme temps de
    simulation. Ceci comporte plusieurs problèmes, entre autre si l'on
    met en sleep le programme, lors de son réveil, toutes les pauses
    des threads seront désynchronisées.

    Une horloge indépendante devrait donc être utilisée afin
    d'abstraire le temps réel du temps de la simulation. Ceci
    permettrait aussi de facilement mettre en pause la simulation, ou
    encore l'accélérer.

*** Trop restrictif en terme de possibilités
    Le système écrit a été conçu de manière à ce que le modèle de la
    simulation soit dans un état stable lors de chaque changements de
    contextes, ce qui ne requiert pas de méchanisme de synchronisation
    supplémentaires. Parcontre, ceci limite beaucoup ce qu'on peut
    faire avec la simulation, ou plustôt comment on doit le
    faire. Pour le jeu de space invaders, touts les invaders d'une
    seule rangée soient bougés en même temps, et donc ne sont pas
    contrôlés individuellement.

** Solutions
*** Nouveau système de mise en attente
    Afin d'éviter les attentes actives, une file d'attente spécialisée
    (file prioritaire) est utilisée afin de garder les threads mis en
    attente sur le temps. Ainsi, on peut savoir très rapidement, pour
    un temps donné si des threads endormi ont besoin d'être réveillés
    ou non.

    Aussi, les thread qui seront mis en attente autrement (mutex)
    seront placés dans une file d'attente de l'objet de
    synchronisation en question, tel que ce l'aurait toujours dû être.


