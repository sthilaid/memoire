(include "bench_.scm")

(define (bench-yield)
  (let* ((t2 (make-thread (lambda () (let loop () (thread-yield!) (loop)))))
         (t1 (make-thread (lambda ()
                            (do ((i 0 (+ i 1)))
                                ((= i benchmark-limit)
                                 (thread-terminate! t2))
                              (thread-yield!))))))
    (thread-quantum-set! t1 +inf.0)
    (thread-quantum-set! t2 +inf.0)
    (thread-start! t2)
    (thread-start! t1)
    (time-expr (thread-join! t1))))

(define (bench-send-receive)
  (let* ((t2 (make-thread (lambda () (let loop ()
                                       (thread-receive)
                                       (thread-yield!)
                                       (loop)))))
         (t1 (make-thread (lambda ()
                            (do ((i 0 (+ i 1)))
                                ((= i benchmark-limit)
                                 (thread-terminate! t2))
                              (thread-send t2 'ping)
                              (thread-yield!))))))
    (thread-quantum-set! t1 +inf.0)
    (thread-quantum-set! t2 +inf.0)
    (thread-start! t2)
    (thread-start! t1)
    (time-expr (thread-join! t1))))

(pp `(gambit-thread yield: ,(bench-yield)))
(pp `(gambit-thread send-receive: ,(bench-send-receive)))

