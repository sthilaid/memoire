;;; $Id: meroon.mit,v 3.3 1996/06/03 06:43:10 queinnec Exp $
;;; Copyright (c) 1990-94 by Christian Queinnec. All rights reserved.

;;;                            ********************************
;;;                            MIT-Scheme Adaptation for Meroon
;;;                            ********************************

;;; This file contains the necessary adaptation to be interpreted by MIT Scheme.
;;;  (load "meroon.mit")
;;;  (load "meroon.scm")

;;; This program is distributed in the hope that it will be useful.
;;; Use and copying of this software and preparation of derivative works
;;; based upon this software are permitted, so long as the following
;;; conditions are met:
;;;      o credit to the authors is acknowledged following current
;;;        academic behaviour
;;;      o no fees or compensation are charged for use, copies, or
;;;        access to this software
;;;      o this copyright notice is included intact.
;;; This software is made available AS IS, and no warranty is made about 
;;; the software or its performance. 

;;; Bug descriptions, use reports, comments or suggestions are welcome.
;;; Send them to    
;;;   <queinnec@polytechnique.fr>   or to:   <Christian.Queinnec@inria.fr>
;;;                                 or to:
;;;   Christian Queinnec                     Christian Queinnec
;;;   Laboratoire d'Informatique de l'X      INRIA -- Rocquencourt
;;;   Ecole Polytechnique                    Domaine de Voluceau, BP 105
;;;   91128 Palaiseau                        78153 Le Chesnay Cedex
;;;   France                                 France

;;;************************************************
;;;    Small, Efficient and Innovative Class System
;;;       Christian Queinnec  
;;;   \'Ecole Polytechnique & INRIA-Rocquencourt
;;;************************************************

;;; The first macro is a macro definer that allows these macros to
;;; remain in the compiled image. The second just defines a macro
;;; local to the sources but normally not visible from the user.

(syntax-table-define system-global-syntax-table 
    'define-meroon-macro
  (macro (call . body)
    (let* ((name      (car call))
           (variables (cdr call))
           (def `(syntax-table-define system-global-syntax-table
                     ',name
                   (macro ,variables ,@body) )) )
      def ) ) )

;;; This is ugly since these macros should not be global but only local 
;;; to the processing of Meroon files.

(syntax-table-define system-global-syntax-table 
    'define-internal-meroon-macro
  (macro (call . body)
    (let* ((name      (car call))
           (variables (cdr call))
           (def `(syntax-table-define system-global-syntax-table
                     ',name
                   (macro ,variables ,@body) )) )
      def ) ) )

;;; Conditional compilation: The variable *meroon-features* defines
;;; the features of Meroon to be taken into account when loading (or
;;; compiling Meroon). 

(define *meroon-features* 
  '( MIT "7.2.0"
     ) )

;;; Local Variables:
;;; mode: scheme
;;; End:

;;; End of adaptation of Meroon for MIT-Scheme.
